Laravel : 
##Routes:

1. Normal routes:
Route::get('/',function(){
	return view('welcome');
})
Route::get('/',ControllerName@Methodname);
Route::post('/',ControllerName@Methodname);

2. Route with Required Parameters : 
Route::get('hello/{name}',function($name){
	echo $name;
});
Route::get('hello/{name}', ControllerName@Methodname);

3. Route with Optional parameters:
Route::get('hello/{name?}',function($name=''){
	echo $name;
});
Route::get('hello/{name}/{address?}', ControllerName@Methodname);

3. Route with Optional parameter having regex pattern
Route::get('hello/{number}','c@m')->where(['number'=>"[0-9]+"]);

4. Named Routes by using name or as
i. Route::get('user/profile','UserController@showProfile')->name('profile'); 
ii. Route::get('user/prfile',['as'=>'profile','uses'=>'UserController@showProfile']);

4. How to display a route name 
  Route::get('/',function(){
    echo route('profile',[123]);              using route
  })

  Route::get('/',function(){
    echo url('user/dashboard/profile',[123]);  using url
  })

@why we use {} braces ? 
@@ To assign paramters in route 

5. Route group with namespace
when controllers are made by creating extra directories i.e Admin/controllers,then it is used.
Route::group(['namespace'=>'Admin'],function(){
   Route::get('/','controllerName@methodName1');
   Route::get('/','controllerName@methodName2');

});

6. Route group with Domain
Route::group(['domain'=>'{domain}'],function(){
   Route::get('/',usercontroller@dashboard);

})
when we type mohit.example.com then mohit will be store in dashboard method in usercontroller 

7. Route group with prefix 
Route::group(['prefix'=>'admin'],function(){
    Route::get('/','c@m');
    Route::post('/','c@m');
});

8. Nested Route groups
Route::group(['prefix'=>'dashboard'],function(){ 
  Route::group(['prefix'=>'admin'],function(){
    Route::get('/','c@m');
    Route::post('/','c@m');
  });
   Route::group(['prefix'=>'user'],function(){
    Route::get('/','c@m');
    Route::post('/','c@m');
  });
})

9. Route to access any method get,post,put,patch,delete
Route::any('/','c@m');

10. Route to access only required methods
Route::match(['put','patch'],'/','c@m')


Route:Resource @@@

#HOW TO PASS DATA TO VIEW
1. No Data
   Route::get('/',function(){
   return view('view_name');	
});

2. Using compact
   Route::get('/',function(){
     $alphabets = array('a','b','c');
     return view('view_name',compact('alphabets'));	
   });
   In view: <?php print_r($alphabets); ?>  

3. Without Using Compact
   Route::get('/',function(){
     $data = array('a','b','c');
     return view('view_name',['aplhabets'=>$data]);
   });
   In view: <?php print_r($alphabets); ?> 
   
3 Using View::make()
  Route::get('/',function(){
    $data = array('a','b','c');
    return View::make('view_name',compact('alphabets'));
  })  

4. Using with
   return view('view_name')
   ->with('data',$data)
   ->with('alphabets',$alphabets);
	OR
   return view('view_name')->with(['name'=>$name, 'address'=>$address]);
        OR
   return view('view_name')->withNames($data);
   In view: Print_r($names);

#Abstract Class : which contain all common methods and variables ,we cant create object of abstract class

#Interface : contain all unimplemented methods which must be implented in child classes , a child class can implements multiple interfaces

#Static variables and static methods are directly related to class while normal variables and methods are related to objects. 
class abc{
	public static function sum(){
   
	}
}

abc::sum();
abc::variablename;
return self::$variable_name NOT return $this->variable_name;     

#LATE STATIC BINDING : 
it assign value on run time not on compile time
return static::$variable_name 

#Dependency Injection
when a class is depend on object of another class/another class we just pass that object in constructor ..thus is called @
!! In laravel case, we use Model name (type hinting ) as parameter in constructor. then create model of that name and service container automatically 
create a object and pass it into that parameter.
!! we use @ to get depenedncy parameters by using them in paramter by doing typehinting.

#Method Overriding in traits :
In this , methods in traits gets a priority over methods defined in parent classes. And
self defined methods gets priority over traits 
i.e SELF Methods> Traits Methods> Parent Classes Methods

#Colliosions in Traits
when 2 same name function exist in 2 diff traits 
class abc{
  use trait1,trait2{
    trait1::methodname insteadof trait2
    trait2::methodname as  trait2Methdname 
  }
}

#Access Level in Traits:
when a method is private in a trait then how to access this method
trait trait1{
 private method sum(){
  echo "sum"; 
  }
 private method trait1(){
  echo "sum"; 
  }
};

class abc {
  use trait1{
    trait1::sum as public @case1
    trait1::methodname as public TESTSUM @case2 
  }
}

obj = new abc();
obj->sum();  @case1
obj->TESTSUM(); @case2

#Middleware
!!simple concept: Create,Register And Call
!!middleware can be called by using route,contoller or routegroup
!!It is used after starting of application and before execution of user defined code.
!!php artisan make:middleware LoggerMiddleware
@how to define it in route:
Route::get('middleware_testing',['middleware'=>'LoggerMiddleware','uses'=>'AdminController@index']);
Route::get('middleware_testing','AdminController@index')->middleware('LoggerMiddleware');
   OR
In controller,  public function __construct(){ $this->middleware(['mid1','mid2']); } 
@if multiple middlewares are there:
In Kernel.php,   $middlewareGroups = ["key"=>[\App\m1,\App\m2,\App\m3]];
Route::get('middleware_testing','c@m')->middleware(['middleware1','middleware2');
@how to assign middlewares to only specific methods i.e only dashboard and index methods
public function __construct(){
  $this->middleware(['auth','logger'],['only'=>['dashboard','index'],]);
}
   OR
public function __construct(){
  $this->middleware(['auth','logger'],['except'=>['index'],]);
}
!!We can assign multiple middlewares in multiple lines acc to requirements
public function __construct(){
  $this->middleware(['auth','logger'],[
      'except'=>['index'],
   ]);
   $this->middleware(['login'],[
     'only'=>['loginmethod'],
   ]);	
}

#VIEW BLADE:
!! it escape the html data from php 
!! it is used to include view layouts in standard manner
!! @yield('section_name') is used to create a section
!! @section('section_name') is used to get that section and @stop/@endsection to end
!! extends('folder/layout_file') is used to include layout files.
!! {{ $variable }} is used to get php code from variable escaping html code
!! {!! $variable !!} is used to get php code from variable as it is
!! unary ondition shortcut is replaced by $data or 'Not Available'
@if @elseif @else @endif
@unless @elseif @else @endif <= ??
@for @endfor
@foreach @endforeach
@while @endwhile
@break for break
@forelse($dataa as $data) [if part] @empty [else part] @endforelse  <= laravel blade feature  

#Override View Sections
masterlayout.php:  yields('content');
view1.php:   @extends('masterlayout.php') @section('content')   test 1 @endsection  
view2.php    @extends('view1.php') @section('content')  test 2 @endsection
output:  test 2  

#Include files:
@include must be used as it reduce time and error chances

!! @each('view_name',$data,'name by which variable is created in view_name','else case view');
   @each('view2',$data,'items','else_view');

#CSS AND JS
@stack('stackname') i.e @stack('css')  i.e @stack('js') 
@push('stackname') i.e @push('css') i.e @push('js')
@endpush               @endpush          @endpush  
we can use multiple push for same stackname

!! {{-- commentable statement -- }} used to comment ,benefit is not visible in even source code

#DATABASE THINGS
fluent is a library much advance than active records(codeigniter)
ORM : 
$user = new User();
$user->fname = 'mohit'
$user->lname = 'kumar'
$user-save();
$user->update();
$user->delete();

SELECT QUERY:   Customers::all(); select * from customers
!! table name is always pural while model is singular
!! abc table is also possible which comes under override 
!! by default ,primary key of each table should be id 
!! laravel assumes that there are 2 default fields 'created_at' and 'updated_at' which fill 
automatically , if not found generate errors , override is possible

#How To Change Traditional Table name or Primary key name or Avoid creating extra fields
Model :  
class Customer extends Model{
	  protected $table = 'customer_list';
	  protected $primaryKey = 'customer_id';
	  public $timestamps = false;
	}
table name will change from customers to customer_list

#Model:How TO AVOID MASS ASSIGNMENT EXCEPTION
 class Customer extends Model{
  protected $fillable = ['name','phnno','address']; OR protected $guarded = ['isadmin'];	
 }
!! protected fillable=[] means no one is need to fill
!! protected guarded=[] means no one is need to guard,all fields will be inserted


INSERT or Create QUERY:
Using Normal way
	$Customer = new Customer; OR $Customer = new App\Customer;
	$customer->name = 'mohit';
	$Customer->phnno = '9996368333';
	$Customer->address = 'noida';
	$Customer->save();
	
OR Using Constructor
	$Customer = new Customer([
	'name'=>'mohit',
	'phnno'=>'9996368333',
	'address'=>'noida',
	]);
	$customer->save();      gives mass assignment error
OR Using CREATE method
  $Customer = Customer::create([
	'name'=>'mohit',
	'phnno'=>'9996368333',
	'address'=>'noida',
	]);
	echo $Customer->id;
	

#How to INSERT additional values in a table
	$Customer = new Customer([
	'name'=>'mohit',
	'phnno'=>'9996368333',
	'address'=>'noida',
	]);
	
	$Customer->fill([
	'state'=>'Haryana'
	'country'=>'India'
	]);
	$Customer->save();

#How to UPDATE a Model
	$Customer = Customer::get($id);
	$Customer->fill([
	'name'=>'mohit',
	'phnno'=>'9996368333',
	'address'=>'noida',
	'state'=>'Haryana'
	'country'=>'India'
	]);
	$Customer->save();

#How to DELETE a MODEL i.e a row from table
      $Customer= Customer::find($id);
	do any activity like data persistence
	$trail = new Trail([
	'username'=>$Customer->name;
	])
	$Customer->delete();
OR DIRECT DELETE
      $Customer= Customer::destroy($id);

#FORM BUILDER
Route::get('adduser','c@m')->name('registration');
 
 {!! Form::open(['url'=>'adduser'])   !!}
 {!! Form::open(['route'=>'name of route if given i.e registration']) !!}
 {!! Form::open(['action'=>'c@m']) !!}
 {!! Form::text('field_one') !!}
 {!! Form::close() !!}

Packages to IMport: FORM,HTML,INPUT
#Input Data from Form
!! In controller: /Input::get('field_one','Not found');
!! In controller: /Input::all();
!! In controller: /Input::only('field_one','field_two'); security purpose
!! In controller: /Input::except('field_three');

function (Request $request){
   $field_one = $request->get('field_one');  
	OR
   $field_one = $request->field_one; //magic method
}
#FORM VALIDATION OLD METHOD
$v =  Validator::make($request->all,[
   'field_one'=>'required|alpha' OR ['required','alpha']
 ])
if( $v->passes() ){

}

if( $v->fails() ){
   return back();
}
#FORM VALIDATION NEW METHOD
In controller 
#1:  Validator::make($request->all(), $rules)->validate();
#2:  $request->validate($rules);
#3:  $this->validate($request,$rules);
##: can be used in all 3 above
 $v = $this->validate($request,[
   'field_one'=>'required|alpha',
 ])

#How to Preserve Data WHEN Validation fail
by using middleware group web which includes sessionstart middleware

#How to make rules class for form validation
 crate a new request in app/http/requests/
 In rules method 
class testrequest
 public function rules()
    {
        return [
            'field_one'=>'required|alpha'
        ];
    } 
 In controller
    public function formSubmit(testrequest $request){
        echo $request->field_one;        
    }
#HOW TO DISPLAY VALIDATION ERROR MSGS
 echo $errors->first('field_one');
 echo $errors->first('field_one','<li class="error">:message</li>');
 output: <li class="error">the field field_one is required.</li>
whatever we write will be replaced by :message

#HOW TO SHOW CUSTOMIZED ERROR MSGS
 In testrequest class ,create a third method message
  public function message(){
    return[
    'required'=>'field :attribute can't be blank',
    'text2.required'=>'field :attribute is blank and must be filled','
  ];
  }

#SESSION 
.env:  session driver: file/database/radis/memecached
In controller,  
$session = $request->session();
$session->put('varname');
$session->get('varname','var value');
$session->get('varname2','Default value'); if not present return "default value"
$session->get('varname',function(){
 return 2+3;
});         O/p: 5
$session->forget('varname');
@if wanted to show just for next request
$session->flash('varname','some data');
@if needs for 2nd next request
$session->reflash();

#MIGRATION:
@how to change a column name and as again in table 
edit changes and  php artisan migrate:refresh : it will rollback and  migrate again , shd never be used on production server 
as it may delete concurrent developer tables..to resolve this create another migration
make:migrate add-phone-number
up function:
!! Schema::create    <= to create new table
!! Schema::table     <= to make changes in exisiting table
!! $Schema::table->string('phone_number')->nullable();
!! $table->engine = 'InnoDB';
down function:
!! $table->drop('tablename');
!! $table->dropColumn('colname') 

#QUERY BUILDER
 By using Model:
 Customer::all();
 By using Query Builder
 \DB::table('customers')->get();
!! DB::table('tablename')
->select('')
->where('')
->get(); 
OR
!! $queryObject = \DB::table('tablename')
  $queryObject->where('id',2); OR where('id','=/</>/like',2/'rahul'/%rah/rah%);
    ->where([
       ['id',2],
       ['phone','like','%99999']
	]);
  ->orWhere('id',2);
 $queryObject->select('col1','col2','col3');
$result = $queryObject->get();  
!!
$q->join('product as p'); 
$q->addSelect();
$q->select(DB::raw("COUNT('name') as customer_count"));
!! $q->whereIn('id',array());
!! $q->whereNotIn('id',array());
!! whereBetween('id',[10,20]);
!! whereNull('updated at');
!! whereColumn('col1','col2');
!! whereColumn('col1','=/</>','col2');
#QUERY LOG
Use DB:
DB::enableQueryLog();
DB::getQueryLog();

#Make:Auth

#HOW TO SOFT DELETE RECORDS
use Illuminate\Database\Eloquent\SoftDeletes;
class Flight extends Model{
    use SoftDeletes;
    protected $dates = ['deleted_at'];
}
!! Of course, you should add the deleted_at column to your database table.
Schema::table('flights', function ($table) {
    $table->softDeletes();
});

#Restoring Soft Deleted Models
$flight->restore();



















