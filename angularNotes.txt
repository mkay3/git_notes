How To install angular :

 npm install -g @angular/cli

Step 2. Create a new project 
ng new my-app or
cd my-app
ng serve

#How angular js load and start
main.ts
index.html 

#HOW TO ADD BOOTSTRAP STYLE IN ANGULAR
1) npm install --save bootstrap
2) add "node_modules/bootstrap/dist/css/bootstrap.min.css"
in node_modules/bootstrap/dist/css/bootstrap.min.css(styles)
3) restart the app i.e ng serve


# HOW TO CREATE A NEW COMPONENT IN ANGULAR
1) create folder in src/app/ i.e server
2) in src/app/server/ , create a component.ts file
   i.e server.component.ts
3) A component is just a class i.e a typescript class
4) export the server class so that we can use it in outside also
  i.e as it is going to be used in app component
5) syntax:  
 i.e    export class ServerComponent {

 }
#Angular is a collection of modules and each module is made up of components and services.
# app is the default module given by default and app component is the default component
# component = HTML + CLASS	

6) add a class decorator to make this class a component not just a simple typescript class
  i.e  @component()
	export class ServerComponent {
	
	}
7) Decorators are always attached with @ sign
8) import this decorator component 
    i.e	import { component } from '@angular/core'
    	@component()
	export class ServerComponent {
	
	}
9) now pass js object to this component i.e selector,templateurl ,
   i.e	import { component } from '@angular/core'
    	@component({
		selector:'app-server'
		templateUrl: './server.component.html'
	})
	export class ServerComponent {

	}
  #selector name shd be unique
  #create a new html file server.component.html in same dir
10) our comp is ready to use , 
   #angular use components to build web pages and uses modules to bundle different components into packages
   # only app module is fine for most projects , only multiple projects need diff modules

11) declare server comp in app.module.ts under @ngModule
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppComponent } from './app.component';
# import { ServerComponent } from './server/server.component'
@NgModule({
  declarations: [
    AppComponent
#   ServerComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

# HOW TO CREATE A NEW COMPONENT WITHOUT SPEC FILE
ng g c comp_name --spec false

# HOW TO GENERATE COMPONENTS USING CLI
 ng generate component component_name
 ng g c component_name

#you must have either templateUrl or template in .ts file
i.e @Component({
     selector: 'app-test';
     template: '<app-server></app-server>';
 	   
     })

#you can have inline css also 
i.e @Component({
     selector: 'app-test';
     templateUrl:'./test.component.html';
     styles: [`
	h3{
	   color:dodgerblue;
	}	
	`]	   
     })

#you must have only 1 template file but you can have multiple css files

#We can use selectors in many ways:
i.e @Component({
     selector: '[app-test]';    =>   <div app-test> hello </div>
     selector: '.app-test';     =>   <div class="app-test"> hello </div>
     selector: 'app-test';      =>   <app-test></app-test>
        })

#String Interpolation : used to o/p data in a template
 1) in class in .ts file create variables,methods and assign value
 2) in  .html file , call these variables and methods
  
#Property Binding : 
<button class="btn btn-primary" [disabled]="!allowNewServer"> Add Server </button>
 # here , allownewserver is a variable created in test.ts file
i.e  export class TestComponent{ 

	allowNewServer = false;

	constructor(){
		setTimeout(() => {
			this.allowNewServer = true;
		},2000);
	}

	
}
#Comparison
<h3> {{ allowNewServer }}</h3>    S.I
<h3 [Innertext]="allowNewServer"></h3>  P.B
<h3 [disabled] = "allowNewServer"></h3>  P.B
<h3 (click) = "function()"></h3> E.B

#for events use () and for properties use [] 

# *ngIf
 <p *ngIf="serverCreated" >Server was created, server name is {{ serverName }} </p>